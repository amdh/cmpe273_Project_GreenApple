// Alexa SDK for JavaScript v1.0.00
// Copyright (c) 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved. Use is subject to license terms.

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ResponseJs = require('./Response.js');

var _ResponseJs2 = _interopRequireDefault(_ResponseJs);

var AlexaSkill = (function () {
  function AlexaSkill(appId) {
    _classCallCheck(this, AlexaSkill);

    this.appId = appId;
  }

  // Alexa Request Handlers

  _createClass(AlexaSkill, [{
    key: 'handleLaunchRequest',
    value: function handleLaunchRequest(event, context, response) {
      this.onLaunchEvent(event.request, event.session, response);
    }
  }, {
    key: 'handleIntentRequest',
    value: function handleIntentRequest(event, context, response) {
      this.onIntentEvent(event.request, event.session, response);
    }
  }, {
    key: 'handleSessionEndedRequest',
    value: function handleSessionEndedRequest(event, context) {
      this.onSessionEndedEvent(event.request, event.session);
      context.succeed();
    }

    // Event Handlers
    /* eslint-disable no-unused-vars */
  }, {
    key: 'onSessionStartedEvent',
    value: function onSessionStartedEvent(sessionStartedRequest, session) {}
  }, {
    key: 'onLaunchEvent',
    value: function onLaunchEvent(launchRequest, session, response) {
      throw 'onLaunch must be overridden by subclass';
    }

    /* eslint-enable no-unused-vars */

  }, {
    key: 'onIntentEvent',
    value: function onIntentEvent(intentRequest, session, response) {
      var intent = intentRequest.intent;
      var intentName = intentRequest.intent.name;
      var intentHandlerName = 'handle' + intentName;
      var intentHandler = this[intentHandlerName];
      if (intentHandler) {
        console.log('Handling intent ' + intentName + ' with handler ' + intentHandlerName);
        intentHandler.call(this, intent, session, response);
      } else {
        throw 'The intent ' + intentName + ' is not supported. To support such\n      an intent, the method ' + intentHandlerName + ' must be present on the\n    class.';
      }
    }

    /* eslint-disable no-unused-vars */
  }, {
    key: 'onSessionEndedEvent',
    value: function onSessionEndedEvent(sessionEndedRequest, session) {}

    /* eslint-enable no-unused-vars */

    // Main Execution
  }, {
    key: 'execute',
    value: function execute(event, context) {
      try {
        console.log('session applicationId: ' + event.session.application.applicationId);

        // Validate that this request originated from authorized source.
        if (this.appId && event.session.application.applicationId !== this.appId) {
          console.log('The applicationIds don\'t match : ' + event.session.application.applicationId + ' and ' + this.appId);
          throw 'Invalid applicationId';
        }

        if (!event.session.attributes) {
          event.session.attributes = {};
        }

        if (event.session['new']) {
          this.onSessionStartedEvent(event.request, event.session);
        }

        // Route the request to the proper handler which may have been overriden.
        var requestHandler = this['handle' + event.request.type];
        requestHandler.call(this, event, context, new _ResponseJs2['default'](context, event.session));
      } catch (e) {
        console.log('Unexpected exception ' + e);
        console.log(event, context);
        context.fail(e);
      }
    }
  }]);

  return AlexaSkill;
})();

exports['default'] = AlexaSkill;
module.exports = exports['default'];